// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package types

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ServerTime struct {
	CurrentTimestamp     int64    `protobuf:"varint,1,opt,name=currentTimestamp,proto3" json:"currentTimestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerTime) Reset()         { *m = ServerTime{} }
func (m *ServerTime) String() string { return proto.CompactTextString(m) }
func (*ServerTime) ProtoMessage()    {}
func (*ServerTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{0}
}

func (m *ServerTime) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServerTime.Unmarshal(m, b)
}
func (m *ServerTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServerTime.Marshal(b, m, deterministic)
}
func (m *ServerTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerTime.Merge(m, src)
}
func (m *ServerTime) XXX_Size() int {
	return xxx_messageInfo_ServerTime.Size(m)
}
func (m *ServerTime) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerTime.DiscardUnknown(m)
}

var xxx_messageInfo_ServerTime proto.InternalMessageInfo

func (m *ServerTime) GetCurrentTimestamp() int64 {
	if m != nil {
		return m.CurrentTimestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*ServerTime)(nil), "types.serverTime")
}

func init() {
	proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1)
}

var fileDescriptor_77a6da22d6a3feb1 = []byte{
	// 1256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xef, 0x6f, 0xdb, 0x36,
	0x13, 0x56, 0xf1, 0xbe, 0x6b, 0x1a, 0xd6, 0x76, 0x1d, 0x26, 0xed, 0x5a, 0x6d, 0x45, 0x07, 0x01,
	0xc3, 0x8a, 0x0d, 0x4d, 0x52, 0x7b, 0xcd, 0xda, 0xb5, 0x1b, 0x50, 0xa7, 0xb5, 0x63, 0xcc, 0xf5,
	0x5c, 0xdb, 0xdd, 0x80, 0x7d, 0x63, 0xe4, 0x9b, 0x23, 0x54, 0x16, 0x65, 0x92, 0x8a, 0xed, 0x3f,
	0x7d, 0xdf, 0x06, 0x92, 0xfa, 0x45, 0x49, 0x4e, 0xb2, 0x6f, 0xe6, 0x73, 0x7c, 0x4e, 0x77, 0xe4,
	0x3d, 0x77, 0x26, 0xda, 0x65, 0xa1, 0x7b, 0x18, 0x32, 0x2a, 0x28, 0xfe, 0x42, 0x6c, 0x42, 0xe0,
	0x76, 0xcd, 0xa5, 0x8b, 0x05, 0x0d, 0x34, 0x68, 0xef, 0x09, 0x46, 0x02, 0x4e, 0x5c, 0xe1, 0xa5,
	0x50, 0xf3, 0xdc, 0xa7, 0xee, 0x67, 0xf7, 0x82, 0x78, 0x09, 0x52, 0x5b, 0x11, 0xdf, 0x07, 0x11,
	0xaf, 0x76, 0xc3, 0x56, 0x18, 0xff, 0xac, 0x13, 0xd7, 0xa5, 0x51, 0x90, 0x58, 0x1a, 0xb0, 0x06,
	0x37, 0x12, 0x94, 0xe9, 0xb5, 0xf3, 0x12, 0x21, 0x0e, 0xec, 0x12, 0xd8, 0xd4, 0x5b, 0x00, 0xfe,
	0x1e, 0x35, 0xdd, 0x88, 0x31, 0x08, 0x84, 0x5c, 0x72, 0x41, 0x16, 0xe1, 0xc3, 0x5b, 0xdf, 0xdc,
	0x7a, 0xfa, 0xbf, 0x71, 0x09, 0x6f, 0xfd, 0xf3, 0x15, 0xda, 0x51, 0x11, 0xb4, 0xdb, 0xf8, 0x19,
	0xda, 0xed, 0x81, 0xe8, 0xc8, 0xa0, 0x38, 0x6e, 0x1e, 0xaa, 0x2c, 0x0e, 0xc7, 0xb0, 0xd4, 0x88,
	0x5d, 0x4b, 0x91, 0xd0, 0xdf, 0x38, 0x16, 0x3e, 0x42, 0xf5, 0x1e, 0x88, 0x01, 0xe1, 0xe2, 0x0c,
	0xc8, 0x0c, 0x18, 0xae, 0x67, 0x94, 0xa1, 0xe7, 0xdb, 0xc9, 0x52, 0x5b, 0x1d, 0x0b, 0xff, 0x8c,
	0x0e, 0x4e, 0x19, 0x10, 0x01, 0x63, 0xb2, 0x9a, 0x66, 0xa7, 0x81, 0xef, 0xc5, 0x1b, 0xb5, 0x71,
	0xba, 0xb6, 0x13, 0xe0, 0x53, 0xc0, 0xbd, 0x79, 0x30, 0x5d, 0x3b, 0x16, 0x7e, 0x87, 0x9a, 0x19,
	0x77, 0xdd, 0x63, 0x34, 0x0a, 0xf1, 0x63, 0x93, 0x97, 0x79, 0x54, 0xe6, 0x2a, 0x2f, 0xbf, 0xa2,
	0xe6, 0xc7, 0x08, 0xd8, 0x26, 0xff, 0xf5, 0x46, 0x16, 0xf5, 0x19, 0xe1, 0x17, 0xf6, 0xc3, 0x78,
	0x9d, 0xdb, 0xf3, 0x0e, 0x04, 0xf1, 0x7c, 0xc7, 0xc2, 0xaf, 0xd0, 0xfe, 0x04, 0x82, 0x59, 0xce,
	0x34, 0xd9, 0x04, 0x2e, 0xc6, 0x65, 0x4a, 0xe9, 0xb4, 0x5e, 0xa0, 0x7b, 0x05, 0xea, 0x8d, 0x68,
	0xbf, 0xa0, 0x83, 0x1e, 0x88, 0xdc, 0x8e, 0xce, 0xe6, 0xed, 0x6c, 0xc6, 0xf2, 0x51, 0xcb, 0xb5,
	0xbd, 0x9f, 0xe7, 0x4d, 0xd7, 0xfd, 0xe0, 0x6f, 0xca, 0x1d, 0x0b, 0xf7, 0xd0, 0x83, 0x22, 0x5d,
	0x26, 0x09, 0xc6, 0xfd, 0x6a, 0xc4, 0x7e, 0xb4, 0x2d, 0x71, 0xe9, 0xe8, 0x25, 0x42, 0x3d, 0x10,
	0x1f, 0x60, 0x31, 0xa2, 0xd4, 0xc7, 0x07, 0x19, 0x59, 0xa3, 0x21, 0xa5, 0xbe, 0x8d, 0xcd, 0x18,
	0x06, 0x1e, 0x17, 0x2a, 0xf1, 0xbb, 0x3d, 0x10, 0x6f, 0x75, 0xfd, 0xf2, 0x62, 0x91, 0xdc, 0x8f,
	0x97, 0x7f, 0xaa, 0xc2, 0x4f, 0x76, 0xa9, 0x62, 0x41, 0x19, 0xad, 0xf0, 0xc1, 0x18, 0xb5, 0x0f,
	0xaa, 0xc8, 0x9a, 0x3b, 0x84, 0x55, 0x05, 0x37, 0x43, 0xb7, 0x72, 0xc7, 0xe8, 0xbe, 0x86, 0x72,
	0xc7, 0x20, 0x33, 0xc1, 0x4f, 0x32, 0x37, 0x95, 0x1b, 0xec, 0x07, 0x86, 0xc7, 0xe9, 0x3a, 0x3b,
	0xbc, 0x2e, 0xaa, 0xf7, 0x17, 0x21, 0x65, 0x62, 0xc4, 0xbc, 0xcb, 0xcf, 0xb0, 0x49, 0x2b, 0x37,
	0xf5, 0x65, 0x98, 0xb7, 0xc6, 0xd6, 0x41, 0x75, 0x55, 0x43, 0x54, 0x5e, 0x39, 0x70, 0x5e, 0xf6,
	0x63, 0x98, 0xed, 0x66, 0xfe, 0x42, 0xe4, 0x2d, 0x3b, 0x16, 0x6e, 0xa1, 0x3b, 0x13, 0x19, 0x5d,
	0x17, 0x00, 0x3f, 0x28, 0xd3, 0x45, 0x17, 0xa0, 0x54, 0x84, 0xaf, 0xd1, 0xce, 0x44, 0x2a, 0xfd,
	0xdc, 0xc7, 0x0f, 0x2b, 0x28, 0x03, 0x72, 0x0e, 0xfe, 0x15, 0x41, 0xd7, 0x3e, 0x00, 0x9b, 0x43,
	0x87, 0xf8, 0x24, 0x70, 0x01, 0x7f, 0x5d, 0xf4, 0x90, 0xb7, 0x9a, 0x35, 0xa4, 0x0b, 0xd3, 0xb1,
	0xf0, 0x09, 0xda, 0x9d, 0x80, 0x18, 0x11, 0xce, 0x57, 0x33, 0xfc, 0xa8, 0x22, 0x04, 0x6d, 0x2a,
	0x05, 0xfe, 0x2d, 0xfa, 0xff, 0x80, 0xba, 0x9f, 0x8b, 0x45, 0x57, 0xdc, 0xf6, 0x0c, 0xdd, 0xfe,
	0x14, 0xa8, 0x8d, 0xfb, 0x46, 0x12, 0x1a, 0xac, 0x90, 0x72, 0x23, 0x6e, 0x7c, 0x89, 0x1e, 0x0a,
	0xfe, 0xab, 0x85, 0xf0, 0x06, 0xd5, 0x7a, 0x20, 0x46, 0x8c, 0x86, 0xc0, 0xe4, 0xe9, 0x67, 0x92,
	0x5d, 0xa6, 0x60, 0xaa, 0x07, 0x45, 0x4d, 0x61, 0xc7, 0xc2, 0x3f, 0xa1, 0x7b, 0x3d, 0x10, 0x71,
	0xc2, 0x82, 0x88, 0xa8, 0x24, 0x25, 0x33, 0x76, 0xbd, 0x47, 0x89, 0xa1, 0x99, 0x74, 0xf5, 0xdf,
	0x2f, 0x81, 0x5d, 0x7a, 0xb0, 0x2a, 0xf5, 0xbc, 0xe4, 0xee, 0x8c, 0x5d, 0x4a, 0xf5, 0xf2, 0xa3,
	0xb2, 0x9c, 0xaa, 0xa8, 0x46, 0xe3, 0xc9, 0x6f, 0x72, 0x2c, 0xfc, 0x5c, 0x25, 0xab, 0xfc, 0xc9,
	0x2f, 0xe4, 0x63, 0xed, 0x07, 0xa2, 0xb2, 0x32, 0x9f, 0xa3, 0x9d, 0x1e, 0x04, 0x13, 0x80, 0x59,
	0xda, 0x19, 0xe3, 0xf5, 0x80, 0x04, 0x73, 0x93, 0x22, 0xd1, 0x84, 0x22, 0x0a, 0x14, 0xb5, 0xee,
	0x6c, 0x46, 0xab, 0x4a, 0xca, 0x11, 0xba, 0x33, 0x21, 0x97, 0xa0, 0x38, 0x49, 0xec, 0x09, 0xa0,
	0x48, 0xc5, 0xdb, 0x6e, 0xa9, 0x46, 0x94, 0x54, 0xef, 0x5e, 0x6e, 0x2c, 0xc6, 0x25, 0x9b, 0xcc,
	0x99, 0x5c, 0xf3, 0x6a, 0x21, 0xa4, 0xe6, 0xcc, 0xa9, 0x9c, 0xac, 0x69, 0x03, 0x52, 0xab, 0xf7,
	0xf1, 0xe4, 0xae, 0xfa, 0x8e, 0xb4, 0xe9, 0xdb, 0xbb, 0x21, 0xe7, 0x04, 0x35, 0xf4, 0x77, 0x68,
	0xc0, 0x21, 0xe0, 0x11, 0xbf, 0x21, 0xef, 0x15, 0xda, 0x2b, 0x0d, 0xcd, 0x34, 0xb5, 0x64, 0x0c,
	0xf7, 0x83, 0xaa, 0x11, 0x7a, 0xac, 0x8a, 0xff, 0x0c, 0xd6, 0xd3, 0xb5, 0x9e, 0x25, 0xa5, 0x62,
	0xaa, 0xa5, 0x73, 0x7f, 0xad, 0x18, 0x2f, 0xd0, 0xdd, 0x77, 0xd1, 0x22, 0x4c, 0x7a, 0x5f, 0x6e,
	0xf0, 0x4c, 0x04, 0xf3, 0x82, 0xb9, 0x29, 0x17, 0x8d, 0xe9, 0xba, 0xcd, 0xd1, 0x78, 0xd7, 0xf3,
	0x8d, 0x86, 0x95, 0xc7, 0x4b, 0xf9, 0xbd, 0x41, 0xd8, 0xe8, 0xa8, 0xff, 0x8d, 0x7d, 0x88, 0x76,
	0xfe, 0x00, 0xc6, 0xe5, 0x99, 0x6c, 0x11, 0x76, 0x6c, 0x96, 0x53, 0xd6, 0xb1, 0xf0, 0x77, 0xe8,
	0x76, 0x9f, 0xab, 0x3f, 0x02, 0xd7, 0xf4, 0x99, 0x13, 0x35, 0x0a, 0x47, 0x00, 0x4c, 0x32, 0xd3,
	0xbb, 0x1a, 0xb5, 0x46, 0x31, 0x3c, 0x86, 0x65, 0x7a, 0xe6, 0x72, 0x1d, 0x77, 0x8e, 0x97, 0x68,
	0x67, 0x08, 0x42, 0x71, 0xbe, 0x34, 0x38, 0x31, 0x2a, 0x69, 0x49, 0x68, 0x43, 0x3a, 0x83, 0x18,
	0x56, 0xd5, 0xde, 0xe8, 0xf3, 0xa1, 0x08, 0x4f, 0xa5, 0x10, 0x6f, 0x12, 0xe2, 0xb1, 0x52, 0x7c,
	0x97, 0x08, 0xe2, 0x77, 0x89, 0xe7, 0x47, 0x0c, 0xb6, 0x31, 0xfa, 0x81, 0x68, 0xb7, 0xd4, 0xf5,
	0x1e, 0xc4, 0xdd, 0x50, 0xa9, 0x7d, 0x02, 0xcb, 0x08, 0xa4, 0x52, 0xb6, 0xd3, 0x4e, 0x7e, 0x74,
	0x2c, 0xdc, 0x46, 0x7b, 0x4a, 0xaa, 0x7a, 0xf7, 0x35, 0xa5, 0x94, 0x90, 0x5e, 0x67, 0xbd, 0xec,
	0x8a, 0x3f, 0x32, 0xfb, 0xf9, 0x6e, 0x96, 0x4d, 0xe1, 0x63, 0xf5, 0x7f, 0x35, 0x26, 0x4f, 0x60,
	0x89, 0x0d, 0xef, 0xe9, 0xb9, 0x27, 0x59, 0x38, 0x16, 0xfe, 0x01, 0xa1, 0x53, 0x9f, 0x72, 0xf8,
	0x18, 0x41, 0x04, 0xd7, 0x9d, 0x5c, 0x57, 0x25, 0xf4, 0xd6, 0xf7, 0xa5, 0xea, 0x92, 0x76, 0x91,
	0x1b, 0x97, 0xa6, 0x25, 0x6d, 0xf4, 0x26, 0xac, 0xb4, 0xb9, 0x3b, 0xf1, 0xe6, 0x81, 0xfa, 0x9f,
	0x9b, 0x9f, 0x11, 0x29, 0x68, 0xce, 0x88, 0x14, 0x76, 0x2c, 0xdc, 0x47, 0xb6, 0x16, 0xef, 0x90,
	0xc6, 0xfe, 0xaa, 0xfe, 0x6e, 0x66, 0xc6, 0x2b, 0x5c, 0x9d, 0xa0, 0x9a, 0xea, 0x2c, 0x63, 0x12,
	0xcc, 0x86, 0xd1, 0x02, 0x67, 0x1a, 0x5d, 0x4a, 0x48, 0xdd, 0x4e, 0x55, 0x13, 0x7f, 0xaa, 0x3a,
	0x72, 0x97, 0x32, 0x63, 0xe8, 0xfe, 0x06, 0x9b, 0xd2, 0x5d, 0x76, 0x10, 0x2e, 0x06, 0xbb, 0xe6,
	0x69, 0xc2, 0x79, 0x70, 0x7b, 0x94, 0xa7, 0xaa, 0x1e, 0x46, 0x84, 0x11, 0xd9, 0x8d, 0xa6, 0x9e,
	0xf0, 0x21, 0x55, 0x88, 0x54, 0x79, 0xde, 0x90, 0x0e, 0x39, 0x8d, 0x66, 0x75, 0xd1, 0x47, 0x7b,
	0x03, 0x4a, 0x66, 0x5b, 0xbd, 0x9c, 0x81, 0x37, 0xbf, 0x10, 0x89, 0x97, 0x47, 0x46, 0xd2, 0x79,
	0x93, 0x63, 0xe1, 0xf7, 0xaa, 0x06, 0x12, 0x4f, 0xda, 0x9a, 0xaf, 0x01, 0xd3, 0xb2, 0x35, 0xa2,
	0x63, 0x35, 0x72, 0xf4, 0xbb, 0xa9, 0xea, 0x25, 0xd6, 0x30, 0x5e, 0x56, 0x5c, 0xa9, 0xa9, 0xae,
	0xd4, 0x94, 0xbe, 0x01, 0x0b, 0xc5, 0x9a, 0xf4, 0xf6, 0xec, 0x95, 0xe8, 0x58, 0x9d, 0x27, 0x7f,
	0x3d, 0x9e, 0x7b, 0xe2, 0x22, 0x3a, 0x3f, 0x74, 0xe9, 0xe2, 0xa8, 0xdd, 0x76, 0x83, 0xa3, 0xf8,
	0x29, 0x78, 0xa4, 0x76, 0x9f, 0xdf, 0x56, 0xaf, 0xcb, 0xf6, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xc7, 0xa5, 0x21, 0xc4, 0xdc, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TuringchainClient is the client API for Turingchain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TuringchainClient interface {
	// turingchain 对外提供服务的接口
	//区块链接口
	GetBlocks(ctx context.Context, in *ReqBlocks, opts ...grpc.CallOption) (*Reply, error)
	//获取最新的区块头
	GetLastHeader(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Header, error)
	//交易接口
	CreateRawTransaction(ctx context.Context, in *CreateTx, opts ...grpc.CallOption) (*UnsignTx, error)
	CreateRawTxGroup(ctx context.Context, in *CreateTransactionGroup, opts ...grpc.CallOption) (*UnsignTx, error)
	// 根据哈希查询交易
	QueryTransaction(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*TransactionDetail, error)
	// 发送交易&&根据哈希查询交易
	SendTransactionSync(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Reply, error)
	// 发送交易
	SendTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Reply, error)
	//通过地址获取交易信息
	GetTransactionByAddr(ctx context.Context, in *ReqAddr, opts ...grpc.CallOption) (*ReplyTxInfos, error)
	//通过哈希数组获取对应的交易
	GetTransactionByHashes(ctx context.Context, in *ReqHashes, opts ...grpc.CallOption) (*TransactionDetails, error)
	//缓存接口
	GetMemPool(ctx context.Context, in *ReqGetMempool, opts ...grpc.CallOption) (*ReplyTxList, error)
	//钱包接口
	//获取钱包账户信息
	GetAccounts(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*WalletAccounts, error)
	//根据账户lable信息获取账户地址
	GetAccount(ctx context.Context, in *ReqGetAccount, opts ...grpc.CallOption) (*WalletAccount, error)
	//创建钱包账户
	NewAccount(ctx context.Context, in *ReqNewAccount, opts ...grpc.CallOption) (*WalletAccount, error)
	//获取钱包的交易列表
	WalletTransactionList(ctx context.Context, in *ReqWalletTransactionList, opts ...grpc.CallOption) (*WalletTxDetails, error)
	//导入钱包私钥
	ImportPrivkey(ctx context.Context, in *ReqWalletImportPrivkey, opts ...grpc.CallOption) (*WalletAccount, error)
	// 发送交易
	SendToAddress(ctx context.Context, in *ReqWalletSendToAddress, opts ...grpc.CallOption) (*ReplyHash, error)
	//设置交易手续费
	SetTxFee(ctx context.Context, in *ReqWalletSetFee, opts ...grpc.CallOption) (*Reply, error)
	//设置标签
	SetLabl(ctx context.Context, in *ReqWalletSetLabel, opts ...grpc.CallOption) (*WalletAccount, error)
	//合并钱包余额
	MergeBalance(ctx context.Context, in *ReqWalletMergeBalance, opts ...grpc.CallOption) (*ReplyHashes, error)
	//设置钱包密码
	SetPasswd(ctx context.Context, in *ReqWalletSetPasswd, opts ...grpc.CallOption) (*Reply, error)
	//给钱包上锁
	Lock(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error)
	//给钱包解锁
	UnLock(ctx context.Context, in *WalletUnLock, opts ...grpc.CallOption) (*Reply, error)
	//获取最新的Mempool
	GetLastMemPool(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*ReplyTxList, error)
	//获取最新的ProperFee
	GetProperFee(ctx context.Context, in *ReqProperFee, opts ...grpc.CallOption) (*ReplyProperFee, error)
	// 获取钱包状态
	GetWalletStatus(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*WalletStatus, error)
	//区块浏览器接口
	///
	GetBlockOverview(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*BlockOverview, error)
	GetAddrOverview(ctx context.Context, in *ReqAddr, opts ...grpc.CallOption) (*AddrOverview, error)
	GetBlockHash(ctx context.Context, in *ReqInt, opts ...grpc.CallOption) (*ReplyHash, error)
	// seed
	// 创建seed
	GenSeed(ctx context.Context, in *GenSeedLang, opts ...grpc.CallOption) (*ReplySeed, error)
	//获取seed
	GetSeed(ctx context.Context, in *GetSeedByPw, opts ...grpc.CallOption) (*ReplySeed, error)
	//保存seed
	SaveSeed(ctx context.Context, in *SaveSeedByPw, opts ...grpc.CallOption) (*Reply, error)
	// Balance Query
	//获取余额
	GetBalance(ctx context.Context, in *ReqBalance, opts ...grpc.CallOption) (*Accounts, error)
	QueryChain(ctx context.Context, in *ChainExecutor, opts ...grpc.CallOption) (*Reply, error)
	ExecWallet(ctx context.Context, in *ChainExecutor, opts ...grpc.CallOption) (*Reply, error)
	QueryConsensus(ctx context.Context, in *ChainExecutor, opts ...grpc.CallOption) (*Reply, error)
	CreateTransaction(ctx context.Context, in *CreateTxIn, opts ...grpc.CallOption) (*UnsignTx, error)
	//获取交易的十六进制编码
	GetHexTxByHash(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*HexTx, error)
	// 导出私钥
	DumpPrivkey(ctx context.Context, in *ReqString, opts ...grpc.CallOption) (*ReplyString, error)
	// 导出全部私钥到文件
	DumpPrivkeysFile(ctx context.Context, in *ReqPrivkeysFile, opts ...grpc.CallOption) (*Reply, error)
	// 从文件中批量导入私钥
	ImportPrivkeysFile(ctx context.Context, in *ReqPrivkeysFile, opts ...grpc.CallOption) (*Reply, error)
	//获取程序版本
	Version(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*VersionInfo, error)
	//是否同步
	IsSync(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error)
	//获取当前节点连接的其他节点信息
	GetPeerInfo(ctx context.Context, in *P2PGetPeerReq, opts ...grpc.CallOption) (*PeerList, error)
	//获取当前节点的网络信息
	NetInfo(ctx context.Context, in *P2PGetNetInfoReq, opts ...grpc.CallOption) (*NodeNetInfo, error)
	// ntpclock是否同步
	IsNtpClockSync(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error)
	//获取系统致命故障信息
	GetFatalFailure(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Int32, error)
	GetLastBlockSequence(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Int64, error)
	// get add block's sequence by hash
	GetSequenceByHash(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*Int64, error)
	//通过block hash 获取对应的blocks信息
	GetBlockByHashes(ctx context.Context, in *ReqHashes, opts ...grpc.CallOption) (*BlockDetails, error)
	//通过block seq 获取对应的blocks hash 信息
	GetBlockBySeq(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*BlockSeq, error)
	//关闭turingchain
	CloseQueue(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error)
	//获取地址所以合约下的余额
	GetAllExecBalance(ctx context.Context, in *ReqAllExecBalance, opts ...grpc.CallOption) (*AllExecBalance, error)
	//签名交易
	SignRawTx(ctx context.Context, in *ReqSignRawTx, opts ...grpc.CallOption) (*ReplySignRawTx, error)
	CreateNoBalanceTransaction(ctx context.Context, in *NoBalanceTx, opts ...grpc.CallOption) (*ReplySignRawTx, error)
	// 获取随机HASH
	QueryRandNum(ctx context.Context, in *ReqRandHash, opts ...grpc.CallOption) (*ReplyHash, error)
	// 获取是否达到fork高度
	GetFork(ctx context.Context, in *ReqKey, opts ...grpc.CallOption) (*Int64, error)
	CreateNoBalanceTxs(ctx context.Context, in *NoBalanceTxs, opts ...grpc.CallOption) (*ReplySignRawTx, error)
	//通过seq以及title获取对应平行连的交易
	GetParaTxByTitle(ctx context.Context, in *ReqParaTxByTitle, opts ...grpc.CallOption) (*ParaTxDetails, error)
	//获取拥有此title交易的区块高度
	LoadParaTxByTitle(ctx context.Context, in *ReqHeightByTitle, opts ...grpc.CallOption) (*ReplyHeightByTitle, error)
	//通过区块高度列表+title获取平行链交易
	GetParaTxByHeight(ctx context.Context, in *ReqParaTxByHeight, opts ...grpc.CallOption) (*ParaTxDetails, error)
	//获取区块头信息
	GetHeaders(ctx context.Context, in *ReqBlocks, opts ...grpc.CallOption) (*Headers, error)
	// get server time
	GetServerTime(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*ServerTime, error)
}

type turingchainClient struct {
	cc grpc.ClientConnInterface
}

func NewTuringchainClient(cc grpc.ClientConnInterface) TuringchainClient {
	return &turingchainClient{cc}
}

func (c *turingchainClient) GetBlocks(ctx context.Context, in *ReqBlocks, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetLastHeader(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Header, error) {
	out := new(Header)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetLastHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) CreateRawTransaction(ctx context.Context, in *CreateTx, opts ...grpc.CallOption) (*UnsignTx, error) {
	out := new(UnsignTx)
	err := c.cc.Invoke(ctx, "/types.turingchain/CreateRawTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) CreateRawTxGroup(ctx context.Context, in *CreateTransactionGroup, opts ...grpc.CallOption) (*UnsignTx, error) {
	out := new(UnsignTx)
	err := c.cc.Invoke(ctx, "/types.turingchain/CreateRawTxGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) QueryTransaction(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*TransactionDetail, error) {
	out := new(TransactionDetail)
	err := c.cc.Invoke(ctx, "/types.turingchain/QueryTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) SendTransactionSync(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.turingchain/SendTransactionSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) SendTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.turingchain/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetTransactionByAddr(ctx context.Context, in *ReqAddr, opts ...grpc.CallOption) (*ReplyTxInfos, error) {
	out := new(ReplyTxInfos)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetTransactionByAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetTransactionByHashes(ctx context.Context, in *ReqHashes, opts ...grpc.CallOption) (*TransactionDetails, error) {
	out := new(TransactionDetails)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetTransactionByHashes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetMemPool(ctx context.Context, in *ReqGetMempool, opts ...grpc.CallOption) (*ReplyTxList, error) {
	out := new(ReplyTxList)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetMemPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetAccounts(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*WalletAccounts, error) {
	out := new(WalletAccounts)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetAccount(ctx context.Context, in *ReqGetAccount, opts ...grpc.CallOption) (*WalletAccount, error) {
	out := new(WalletAccount)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) NewAccount(ctx context.Context, in *ReqNewAccount, opts ...grpc.CallOption) (*WalletAccount, error) {
	out := new(WalletAccount)
	err := c.cc.Invoke(ctx, "/types.turingchain/NewAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) WalletTransactionList(ctx context.Context, in *ReqWalletTransactionList, opts ...grpc.CallOption) (*WalletTxDetails, error) {
	out := new(WalletTxDetails)
	err := c.cc.Invoke(ctx, "/types.turingchain/WalletTransactionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) ImportPrivkey(ctx context.Context, in *ReqWalletImportPrivkey, opts ...grpc.CallOption) (*WalletAccount, error) {
	out := new(WalletAccount)
	err := c.cc.Invoke(ctx, "/types.turingchain/ImportPrivkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) SendToAddress(ctx context.Context, in *ReqWalletSendToAddress, opts ...grpc.CallOption) (*ReplyHash, error) {
	out := new(ReplyHash)
	err := c.cc.Invoke(ctx, "/types.turingchain/SendToAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) SetTxFee(ctx context.Context, in *ReqWalletSetFee, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.turingchain/SetTxFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) SetLabl(ctx context.Context, in *ReqWalletSetLabel, opts ...grpc.CallOption) (*WalletAccount, error) {
	out := new(WalletAccount)
	err := c.cc.Invoke(ctx, "/types.turingchain/SetLabl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) MergeBalance(ctx context.Context, in *ReqWalletMergeBalance, opts ...grpc.CallOption) (*ReplyHashes, error) {
	out := new(ReplyHashes)
	err := c.cc.Invoke(ctx, "/types.turingchain/MergeBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) SetPasswd(ctx context.Context, in *ReqWalletSetPasswd, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.turingchain/SetPasswd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) Lock(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.turingchain/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) UnLock(ctx context.Context, in *WalletUnLock, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.turingchain/UnLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetLastMemPool(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*ReplyTxList, error) {
	out := new(ReplyTxList)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetLastMemPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetProperFee(ctx context.Context, in *ReqProperFee, opts ...grpc.CallOption) (*ReplyProperFee, error) {
	out := new(ReplyProperFee)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetProperFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetWalletStatus(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*WalletStatus, error) {
	out := new(WalletStatus)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetWalletStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetBlockOverview(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*BlockOverview, error) {
	out := new(BlockOverview)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetBlockOverview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetAddrOverview(ctx context.Context, in *ReqAddr, opts ...grpc.CallOption) (*AddrOverview, error) {
	out := new(AddrOverview)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetAddrOverview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetBlockHash(ctx context.Context, in *ReqInt, opts ...grpc.CallOption) (*ReplyHash, error) {
	out := new(ReplyHash)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GenSeed(ctx context.Context, in *GenSeedLang, opts ...grpc.CallOption) (*ReplySeed, error) {
	out := new(ReplySeed)
	err := c.cc.Invoke(ctx, "/types.turingchain/GenSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetSeed(ctx context.Context, in *GetSeedByPw, opts ...grpc.CallOption) (*ReplySeed, error) {
	out := new(ReplySeed)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) SaveSeed(ctx context.Context, in *SaveSeedByPw, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.turingchain/SaveSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetBalance(ctx context.Context, in *ReqBalance, opts ...grpc.CallOption) (*Accounts, error) {
	out := new(Accounts)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) QueryChain(ctx context.Context, in *ChainExecutor, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.turingchain/QueryChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) ExecWallet(ctx context.Context, in *ChainExecutor, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.turingchain/ExecWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) QueryConsensus(ctx context.Context, in *ChainExecutor, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.turingchain/QueryConsensus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) CreateTransaction(ctx context.Context, in *CreateTxIn, opts ...grpc.CallOption) (*UnsignTx, error) {
	out := new(UnsignTx)
	err := c.cc.Invoke(ctx, "/types.turingchain/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetHexTxByHash(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*HexTx, error) {
	out := new(HexTx)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetHexTxByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) DumpPrivkey(ctx context.Context, in *ReqString, opts ...grpc.CallOption) (*ReplyString, error) {
	out := new(ReplyString)
	err := c.cc.Invoke(ctx, "/types.turingchain/DumpPrivkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) DumpPrivkeysFile(ctx context.Context, in *ReqPrivkeysFile, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.turingchain/DumpPrivkeysFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) ImportPrivkeysFile(ctx context.Context, in *ReqPrivkeysFile, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.turingchain/ImportPrivkeysFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) Version(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*VersionInfo, error) {
	out := new(VersionInfo)
	err := c.cc.Invoke(ctx, "/types.turingchain/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) IsSync(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.turingchain/IsSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetPeerInfo(ctx context.Context, in *P2PGetPeerReq, opts ...grpc.CallOption) (*PeerList, error) {
	out := new(PeerList)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetPeerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) NetInfo(ctx context.Context, in *P2PGetNetInfoReq, opts ...grpc.CallOption) (*NodeNetInfo, error) {
	out := new(NodeNetInfo)
	err := c.cc.Invoke(ctx, "/types.turingchain/NetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) IsNtpClockSync(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.turingchain/IsNtpClockSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetFatalFailure(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Int32, error) {
	out := new(Int32)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetFatalFailure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetLastBlockSequence(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetLastBlockSequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetSequenceByHash(ctx context.Context, in *ReqHash, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetSequenceByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetBlockByHashes(ctx context.Context, in *ReqHashes, opts ...grpc.CallOption) (*BlockDetails, error) {
	out := new(BlockDetails)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetBlockByHashes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetBlockBySeq(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*BlockSeq, error) {
	out := new(BlockSeq)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetBlockBySeq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) CloseQueue(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/types.turingchain/CloseQueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetAllExecBalance(ctx context.Context, in *ReqAllExecBalance, opts ...grpc.CallOption) (*AllExecBalance, error) {
	out := new(AllExecBalance)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetAllExecBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) SignRawTx(ctx context.Context, in *ReqSignRawTx, opts ...grpc.CallOption) (*ReplySignRawTx, error) {
	out := new(ReplySignRawTx)
	err := c.cc.Invoke(ctx, "/types.turingchain/SignRawTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) CreateNoBalanceTransaction(ctx context.Context, in *NoBalanceTx, opts ...grpc.CallOption) (*ReplySignRawTx, error) {
	out := new(ReplySignRawTx)
	err := c.cc.Invoke(ctx, "/types.turingchain/CreateNoBalanceTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) QueryRandNum(ctx context.Context, in *ReqRandHash, opts ...grpc.CallOption) (*ReplyHash, error) {
	out := new(ReplyHash)
	err := c.cc.Invoke(ctx, "/types.turingchain/QueryRandNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetFork(ctx context.Context, in *ReqKey, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetFork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) CreateNoBalanceTxs(ctx context.Context, in *NoBalanceTxs, opts ...grpc.CallOption) (*ReplySignRawTx, error) {
	out := new(ReplySignRawTx)
	err := c.cc.Invoke(ctx, "/types.turingchain/CreateNoBalanceTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetParaTxByTitle(ctx context.Context, in *ReqParaTxByTitle, opts ...grpc.CallOption) (*ParaTxDetails, error) {
	out := new(ParaTxDetails)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetParaTxByTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) LoadParaTxByTitle(ctx context.Context, in *ReqHeightByTitle, opts ...grpc.CallOption) (*ReplyHeightByTitle, error) {
	out := new(ReplyHeightByTitle)
	err := c.cc.Invoke(ctx, "/types.turingchain/LoadParaTxByTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetParaTxByHeight(ctx context.Context, in *ReqParaTxByHeight, opts ...grpc.CallOption) (*ParaTxDetails, error) {
	out := new(ParaTxDetails)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetParaTxByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetHeaders(ctx context.Context, in *ReqBlocks, opts ...grpc.CallOption) (*Headers, error) {
	out := new(Headers)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *turingchainClient) GetServerTime(ctx context.Context, in *ReqNil, opts ...grpc.CallOption) (*ServerTime, error) {
	out := new(ServerTime)
	err := c.cc.Invoke(ctx, "/types.turingchain/GetServerTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TuringchainServer is the server API for Turingchain service.
type TuringchainServer interface {
	// turingchain 对外提供服务的接口
	//区块链接口
	GetBlocks(context.Context, *ReqBlocks) (*Reply, error)
	//获取最新的区块头
	GetLastHeader(context.Context, *ReqNil) (*Header, error)
	//交易接口
	CreateRawTransaction(context.Context, *CreateTx) (*UnsignTx, error)
	CreateRawTxGroup(context.Context, *CreateTransactionGroup) (*UnsignTx, error)
	// 根据哈希查询交易
	QueryTransaction(context.Context, *ReqHash) (*TransactionDetail, error)
	// 发送交易&&根据哈希查询交易
	SendTransactionSync(context.Context, *Transaction) (*Reply, error)
	// 发送交易
	SendTransaction(context.Context, *Transaction) (*Reply, error)
	//通过地址获取交易信息
	GetTransactionByAddr(context.Context, *ReqAddr) (*ReplyTxInfos, error)
	//通过哈希数组获取对应的交易
	GetTransactionByHashes(context.Context, *ReqHashes) (*TransactionDetails, error)
	//缓存接口
	GetMemPool(context.Context, *ReqGetMempool) (*ReplyTxList, error)
	//钱包接口
	//获取钱包账户信息
	GetAccounts(context.Context, *ReqNil) (*WalletAccounts, error)
	//根据账户lable信息获取账户地址
	GetAccount(context.Context, *ReqGetAccount) (*WalletAccount, error)
	//创建钱包账户
	NewAccount(context.Context, *ReqNewAccount) (*WalletAccount, error)
	//获取钱包的交易列表
	WalletTransactionList(context.Context, *ReqWalletTransactionList) (*WalletTxDetails, error)
	//导入钱包私钥
	ImportPrivkey(context.Context, *ReqWalletImportPrivkey) (*WalletAccount, error)
	// 发送交易
	SendToAddress(context.Context, *ReqWalletSendToAddress) (*ReplyHash, error)
	//设置交易手续费
	SetTxFee(context.Context, *ReqWalletSetFee) (*Reply, error)
	//设置标签
	SetLabl(context.Context, *ReqWalletSetLabel) (*WalletAccount, error)
	//合并钱包余额
	MergeBalance(context.Context, *ReqWalletMergeBalance) (*ReplyHashes, error)
	//设置钱包密码
	SetPasswd(context.Context, *ReqWalletSetPasswd) (*Reply, error)
	//给钱包上锁
	Lock(context.Context, *ReqNil) (*Reply, error)
	//给钱包解锁
	UnLock(context.Context, *WalletUnLock) (*Reply, error)
	//获取最新的Mempool
	GetLastMemPool(context.Context, *ReqNil) (*ReplyTxList, error)
	//获取最新的ProperFee
	GetProperFee(context.Context, *ReqProperFee) (*ReplyProperFee, error)
	// 获取钱包状态
	GetWalletStatus(context.Context, *ReqNil) (*WalletStatus, error)
	//区块浏览器接口
	///
	GetBlockOverview(context.Context, *ReqHash) (*BlockOverview, error)
	GetAddrOverview(context.Context, *ReqAddr) (*AddrOverview, error)
	GetBlockHash(context.Context, *ReqInt) (*ReplyHash, error)
	// seed
	// 创建seed
	GenSeed(context.Context, *GenSeedLang) (*ReplySeed, error)
	//获取seed
	GetSeed(context.Context, *GetSeedByPw) (*ReplySeed, error)
	//保存seed
	SaveSeed(context.Context, *SaveSeedByPw) (*Reply, error)
	// Balance Query
	//获取余额
	GetBalance(context.Context, *ReqBalance) (*Accounts, error)
	QueryChain(context.Context, *ChainExecutor) (*Reply, error)
	ExecWallet(context.Context, *ChainExecutor) (*Reply, error)
	QueryConsensus(context.Context, *ChainExecutor) (*Reply, error)
	CreateTransaction(context.Context, *CreateTxIn) (*UnsignTx, error)
	//获取交易的十六进制编码
	GetHexTxByHash(context.Context, *ReqHash) (*HexTx, error)
	// 导出私钥
	DumpPrivkey(context.Context, *ReqString) (*ReplyString, error)
	// 导出全部私钥到文件
	DumpPrivkeysFile(context.Context, *ReqPrivkeysFile) (*Reply, error)
	// 从文件中批量导入私钥
	ImportPrivkeysFile(context.Context, *ReqPrivkeysFile) (*Reply, error)
	//获取程序版本
	Version(context.Context, *ReqNil) (*VersionInfo, error)
	//是否同步
	IsSync(context.Context, *ReqNil) (*Reply, error)
	//获取当前节点连接的其他节点信息
	GetPeerInfo(context.Context, *P2PGetPeerReq) (*PeerList, error)
	//获取当前节点的网络信息
	NetInfo(context.Context, *P2PGetNetInfoReq) (*NodeNetInfo, error)
	// ntpclock是否同步
	IsNtpClockSync(context.Context, *ReqNil) (*Reply, error)
	//获取系统致命故障信息
	GetFatalFailure(context.Context, *ReqNil) (*Int32, error)
	GetLastBlockSequence(context.Context, *ReqNil) (*Int64, error)
	// get add block's sequence by hash
	GetSequenceByHash(context.Context, *ReqHash) (*Int64, error)
	//通过block hash 获取对应的blocks信息
	GetBlockByHashes(context.Context, *ReqHashes) (*BlockDetails, error)
	//通过block seq 获取对应的blocks hash 信息
	GetBlockBySeq(context.Context, *Int64) (*BlockSeq, error)
	//关闭turingchain
	CloseQueue(context.Context, *ReqNil) (*Reply, error)
	//获取地址所以合约下的余额
	GetAllExecBalance(context.Context, *ReqAllExecBalance) (*AllExecBalance, error)
	//签名交易
	SignRawTx(context.Context, *ReqSignRawTx) (*ReplySignRawTx, error)
	CreateNoBalanceTransaction(context.Context, *NoBalanceTx) (*ReplySignRawTx, error)
	// 获取随机HASH
	QueryRandNum(context.Context, *ReqRandHash) (*ReplyHash, error)
	// 获取是否达到fork高度
	GetFork(context.Context, *ReqKey) (*Int64, error)
	CreateNoBalanceTxs(context.Context, *NoBalanceTxs) (*ReplySignRawTx, error)
	//通过seq以及title获取对应平行连的交易
	GetParaTxByTitle(context.Context, *ReqParaTxByTitle) (*ParaTxDetails, error)
	//获取拥有此title交易的区块高度
	LoadParaTxByTitle(context.Context, *ReqHeightByTitle) (*ReplyHeightByTitle, error)
	//通过区块高度列表+title获取平行链交易
	GetParaTxByHeight(context.Context, *ReqParaTxByHeight) (*ParaTxDetails, error)
	//获取区块头信息
	GetHeaders(context.Context, *ReqBlocks) (*Headers, error)
	// get server time
	GetServerTime(context.Context, *ReqNil) (*ServerTime, error)
}

// UnimplementedTuringchainServer can be embedded to have forward compatible implementations.
type UnimplementedTuringchainServer struct {
}

func (*UnimplementedTuringchainServer) GetBlocks(ctx context.Context, req *ReqBlocks) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (*UnimplementedTuringchainServer) GetLastHeader(ctx context.Context, req *ReqNil) (*Header, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastHeader not implemented")
}
func (*UnimplementedTuringchainServer) CreateRawTransaction(ctx context.Context, req *CreateTx) (*UnsignTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRawTransaction not implemented")
}
func (*UnimplementedTuringchainServer) CreateRawTxGroup(ctx context.Context, req *CreateTransactionGroup) (*UnsignTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRawTxGroup not implemented")
}
func (*UnimplementedTuringchainServer) QueryTransaction(ctx context.Context, req *ReqHash) (*TransactionDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTransaction not implemented")
}
func (*UnimplementedTuringchainServer) SendTransactionSync(ctx context.Context, req *Transaction) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransactionSync not implemented")
}
func (*UnimplementedTuringchainServer) SendTransaction(ctx context.Context, req *Transaction) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (*UnimplementedTuringchainServer) GetTransactionByAddr(ctx context.Context, req *ReqAddr) (*ReplyTxInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByAddr not implemented")
}
func (*UnimplementedTuringchainServer) GetTransactionByHashes(ctx context.Context, req *ReqHashes) (*TransactionDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByHashes not implemented")
}
func (*UnimplementedTuringchainServer) GetMemPool(ctx context.Context, req *ReqGetMempool) (*ReplyTxList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemPool not implemented")
}
func (*UnimplementedTuringchainServer) GetAccounts(ctx context.Context, req *ReqNil) (*WalletAccounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}
func (*UnimplementedTuringchainServer) GetAccount(ctx context.Context, req *ReqGetAccount) (*WalletAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedTuringchainServer) NewAccount(ctx context.Context, req *ReqNewAccount) (*WalletAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAccount not implemented")
}
func (*UnimplementedTuringchainServer) WalletTransactionList(ctx context.Context, req *ReqWalletTransactionList) (*WalletTxDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletTransactionList not implemented")
}
func (*UnimplementedTuringchainServer) ImportPrivkey(ctx context.Context, req *ReqWalletImportPrivkey) (*WalletAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportPrivkey not implemented")
}
func (*UnimplementedTuringchainServer) SendToAddress(ctx context.Context, req *ReqWalletSendToAddress) (*ReplyHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToAddress not implemented")
}
func (*UnimplementedTuringchainServer) SetTxFee(ctx context.Context, req *ReqWalletSetFee) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTxFee not implemented")
}
func (*UnimplementedTuringchainServer) SetLabl(ctx context.Context, req *ReqWalletSetLabel) (*WalletAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLabl not implemented")
}
func (*UnimplementedTuringchainServer) MergeBalance(ctx context.Context, req *ReqWalletMergeBalance) (*ReplyHashes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeBalance not implemented")
}
func (*UnimplementedTuringchainServer) SetPasswd(ctx context.Context, req *ReqWalletSetPasswd) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPasswd not implemented")
}
func (*UnimplementedTuringchainServer) Lock(ctx context.Context, req *ReqNil) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (*UnimplementedTuringchainServer) UnLock(ctx context.Context, req *WalletUnLock) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLock not implemented")
}
func (*UnimplementedTuringchainServer) GetLastMemPool(ctx context.Context, req *ReqNil) (*ReplyTxList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastMemPool not implemented")
}
func (*UnimplementedTuringchainServer) GetProperFee(ctx context.Context, req *ReqProperFee) (*ReplyProperFee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProperFee not implemented")
}
func (*UnimplementedTuringchainServer) GetWalletStatus(ctx context.Context, req *ReqNil) (*WalletStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletStatus not implemented")
}
func (*UnimplementedTuringchainServer) GetBlockOverview(ctx context.Context, req *ReqHash) (*BlockOverview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockOverview not implemented")
}
func (*UnimplementedTuringchainServer) GetAddrOverview(ctx context.Context, req *ReqAddr) (*AddrOverview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddrOverview not implemented")
}
func (*UnimplementedTuringchainServer) GetBlockHash(ctx context.Context, req *ReqInt) (*ReplyHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHash not implemented")
}
func (*UnimplementedTuringchainServer) GenSeed(ctx context.Context, req *GenSeedLang) (*ReplySeed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenSeed not implemented")
}
func (*UnimplementedTuringchainServer) GetSeed(ctx context.Context, req *GetSeedByPw) (*ReplySeed, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeed not implemented")
}
func (*UnimplementedTuringchainServer) SaveSeed(ctx context.Context, req *SaveSeedByPw) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSeed not implemented")
}
func (*UnimplementedTuringchainServer) GetBalance(ctx context.Context, req *ReqBalance) (*Accounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (*UnimplementedTuringchainServer) QueryChain(ctx context.Context, req *ChainExecutor) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryChain not implemented")
}
func (*UnimplementedTuringchainServer) ExecWallet(ctx context.Context, req *ChainExecutor) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecWallet not implemented")
}
func (*UnimplementedTuringchainServer) QueryConsensus(ctx context.Context, req *ChainExecutor) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryConsensus not implemented")
}
func (*UnimplementedTuringchainServer) CreateTransaction(ctx context.Context, req *CreateTxIn) (*UnsignTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (*UnimplementedTuringchainServer) GetHexTxByHash(ctx context.Context, req *ReqHash) (*HexTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHexTxByHash not implemented")
}
func (*UnimplementedTuringchainServer) DumpPrivkey(ctx context.Context, req *ReqString) (*ReplyString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpPrivkey not implemented")
}
func (*UnimplementedTuringchainServer) DumpPrivkeysFile(ctx context.Context, req *ReqPrivkeysFile) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpPrivkeysFile not implemented")
}
func (*UnimplementedTuringchainServer) ImportPrivkeysFile(ctx context.Context, req *ReqPrivkeysFile) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportPrivkeysFile not implemented")
}
func (*UnimplementedTuringchainServer) Version(ctx context.Context, req *ReqNil) (*VersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (*UnimplementedTuringchainServer) IsSync(ctx context.Context, req *ReqNil) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSync not implemented")
}
func (*UnimplementedTuringchainServer) GetPeerInfo(ctx context.Context, req *P2PGetPeerReq) (*PeerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeerInfo not implemented")
}
func (*UnimplementedTuringchainServer) NetInfo(ctx context.Context, req *P2PGetNetInfoReq) (*NodeNetInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetInfo not implemented")
}
func (*UnimplementedTuringchainServer) IsNtpClockSync(ctx context.Context, req *ReqNil) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsNtpClockSync not implemented")
}
func (*UnimplementedTuringchainServer) GetFatalFailure(ctx context.Context, req *ReqNil) (*Int32, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFatalFailure not implemented")
}
func (*UnimplementedTuringchainServer) GetLastBlockSequence(ctx context.Context, req *ReqNil) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastBlockSequence not implemented")
}
func (*UnimplementedTuringchainServer) GetSequenceByHash(ctx context.Context, req *ReqHash) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSequenceByHash not implemented")
}
func (*UnimplementedTuringchainServer) GetBlockByHashes(ctx context.Context, req *ReqHashes) (*BlockDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHashes not implemented")
}
func (*UnimplementedTuringchainServer) GetBlockBySeq(ctx context.Context, req *Int64) (*BlockSeq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockBySeq not implemented")
}
func (*UnimplementedTuringchainServer) CloseQueue(ctx context.Context, req *ReqNil) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseQueue not implemented")
}
func (*UnimplementedTuringchainServer) GetAllExecBalance(ctx context.Context, req *ReqAllExecBalance) (*AllExecBalance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllExecBalance not implemented")
}
func (*UnimplementedTuringchainServer) SignRawTx(ctx context.Context, req *ReqSignRawTx) (*ReplySignRawTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignRawTx not implemented")
}
func (*UnimplementedTuringchainServer) CreateNoBalanceTransaction(ctx context.Context, req *NoBalanceTx) (*ReplySignRawTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNoBalanceTransaction not implemented")
}
func (*UnimplementedTuringchainServer) QueryRandNum(ctx context.Context, req *ReqRandHash) (*ReplyHash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryRandNum not implemented")
}
func (*UnimplementedTuringchainServer) GetFork(ctx context.Context, req *ReqKey) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFork not implemented")
}
func (*UnimplementedTuringchainServer) CreateNoBalanceTxs(ctx context.Context, req *NoBalanceTxs) (*ReplySignRawTx, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNoBalanceTxs not implemented")
}
func (*UnimplementedTuringchainServer) GetParaTxByTitle(ctx context.Context, req *ReqParaTxByTitle) (*ParaTxDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParaTxByTitle not implemented")
}
func (*UnimplementedTuringchainServer) LoadParaTxByTitle(ctx context.Context, req *ReqHeightByTitle) (*ReplyHeightByTitle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadParaTxByTitle not implemented")
}
func (*UnimplementedTuringchainServer) GetParaTxByHeight(ctx context.Context, req *ReqParaTxByHeight) (*ParaTxDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParaTxByHeight not implemented")
}
func (*UnimplementedTuringchainServer) GetHeaders(ctx context.Context, req *ReqBlocks) (*Headers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHeaders not implemented")
}
func (*UnimplementedTuringchainServer) GetServerTime(ctx context.Context, req *ReqNil) (*ServerTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerTime not implemented")
}

func RegisterTuringchainServer(s *grpc.Server, srv TuringchainServer) {
	s.RegisterService(&_Turingchain_serviceDesc, srv)
}

func _Turingchain_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBlocks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetBlocks(ctx, req.(*ReqBlocks))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetLastHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetLastHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetLastHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetLastHeader(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_CreateRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).CreateRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/CreateRawTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).CreateRawTransaction(ctx, req.(*CreateTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_CreateRawTxGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).CreateRawTxGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/CreateRawTxGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).CreateRawTxGroup(ctx, req.(*CreateTransactionGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_QueryTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).QueryTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/QueryTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).QueryTransaction(ctx, req.(*ReqHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_SendTransactionSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).SendTransactionSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/SendTransactionSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).SendTransactionSync(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).SendTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetTransactionByAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetTransactionByAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetTransactionByAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetTransactionByAddr(ctx, req.(*ReqAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetTransactionByHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetTransactionByHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetTransactionByHashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetTransactionByHashes(ctx, req.(*ReqHashes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetMemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetMempool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetMemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetMemPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetMemPool(ctx, req.(*ReqGetMempool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetAccounts(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetAccount(ctx, req.(*ReqGetAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_NewAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNewAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).NewAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/NewAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).NewAccount(ctx, req.(*ReqNewAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_WalletTransactionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletTransactionList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).WalletTransactionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/WalletTransactionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).WalletTransactionList(ctx, req.(*ReqWalletTransactionList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_ImportPrivkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletImportPrivkey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).ImportPrivkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/ImportPrivkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).ImportPrivkey(ctx, req.(*ReqWalletImportPrivkey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_SendToAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletSendToAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).SendToAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/SendToAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).SendToAddress(ctx, req.(*ReqWalletSendToAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_SetTxFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletSetFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).SetTxFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/SetTxFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).SetTxFee(ctx, req.(*ReqWalletSetFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_SetLabl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletSetLabel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).SetLabl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/SetLabl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).SetLabl(ctx, req.(*ReqWalletSetLabel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_MergeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletMergeBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).MergeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/MergeBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).MergeBalance(ctx, req.(*ReqWalletMergeBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_SetPasswd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWalletSetPasswd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).SetPasswd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/SetPasswd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).SetPasswd(ctx, req.(*ReqWalletSetPasswd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).Lock(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_UnLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletUnLock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).UnLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/UnLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).UnLock(ctx, req.(*WalletUnLock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetLastMemPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetLastMemPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetLastMemPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetLastMemPool(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetProperFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqProperFee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetProperFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetProperFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetProperFee(ctx, req.(*ReqProperFee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetWalletStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetWalletStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetWalletStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetWalletStatus(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetBlockOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetBlockOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetBlockOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetBlockOverview(ctx, req.(*ReqHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetAddrOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAddr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetAddrOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetAddrOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetAddrOverview(ctx, req.(*ReqAddr))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqInt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetBlockHash(ctx, req.(*ReqInt))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GenSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenSeedLang)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GenSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GenSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GenSeed(ctx, req.(*GenSeedLang))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeedByPw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetSeed(ctx, req.(*GetSeedByPw))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_SaveSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSeedByPw)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).SaveSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/SaveSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).SaveSeed(ctx, req.(*SaveSeedByPw))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetBalance(ctx, req.(*ReqBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_QueryChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainExecutor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).QueryChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/QueryChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).QueryChain(ctx, req.(*ChainExecutor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_ExecWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainExecutor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).ExecWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/ExecWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).ExecWallet(ctx, req.(*ChainExecutor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_QueryConsensus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainExecutor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).QueryConsensus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/QueryConsensus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).QueryConsensus(ctx, req.(*ChainExecutor))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTxIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).CreateTransaction(ctx, req.(*CreateTxIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetHexTxByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetHexTxByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetHexTxByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetHexTxByHash(ctx, req.(*ReqHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_DumpPrivkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).DumpPrivkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/DumpPrivkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).DumpPrivkey(ctx, req.(*ReqString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_DumpPrivkeysFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPrivkeysFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).DumpPrivkeysFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/DumpPrivkeysFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).DumpPrivkeysFile(ctx, req.(*ReqPrivkeysFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_ImportPrivkeysFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPrivkeysFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).ImportPrivkeysFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/ImportPrivkeysFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).ImportPrivkeysFile(ctx, req.(*ReqPrivkeysFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).Version(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_IsSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).IsSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/IsSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).IsSync(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetPeerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PGetPeerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetPeerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetPeerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetPeerInfo(ctx, req.(*P2PGetPeerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_NetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(P2PGetNetInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).NetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/NetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).NetInfo(ctx, req.(*P2PGetNetInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_IsNtpClockSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).IsNtpClockSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/IsNtpClockSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).IsNtpClockSync(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetFatalFailure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetFatalFailure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetFatalFailure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetFatalFailure(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetLastBlockSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetLastBlockSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetLastBlockSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetLastBlockSequence(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetSequenceByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetSequenceByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetSequenceByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetSequenceByHash(ctx, req.(*ReqHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetBlockByHashes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHashes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetBlockByHashes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetBlockByHashes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetBlockByHashes(ctx, req.(*ReqHashes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetBlockBySeq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetBlockBySeq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetBlockBySeq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetBlockBySeq(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_CloseQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).CloseQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/CloseQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).CloseQueue(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetAllExecBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAllExecBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetAllExecBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetAllExecBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetAllExecBalance(ctx, req.(*ReqAllExecBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_SignRawTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSignRawTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).SignRawTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/SignRawTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).SignRawTx(ctx, req.(*ReqSignRawTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_CreateNoBalanceTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoBalanceTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).CreateNoBalanceTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/CreateNoBalanceTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).CreateNoBalanceTransaction(ctx, req.(*NoBalanceTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_QueryRandNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRandHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).QueryRandNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/QueryRandNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).QueryRandNum(ctx, req.(*ReqRandHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetFork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetFork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetFork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetFork(ctx, req.(*ReqKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_CreateNoBalanceTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoBalanceTxs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).CreateNoBalanceTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/CreateNoBalanceTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).CreateNoBalanceTxs(ctx, req.(*NoBalanceTxs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetParaTxByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqParaTxByTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetParaTxByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetParaTxByTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetParaTxByTitle(ctx, req.(*ReqParaTxByTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_LoadParaTxByTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqHeightByTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).LoadParaTxByTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/LoadParaTxByTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).LoadParaTxByTitle(ctx, req.(*ReqHeightByTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetParaTxByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqParaTxByHeight)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetParaTxByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetParaTxByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetParaTxByHeight(ctx, req.(*ReqParaTxByHeight))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBlocks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetHeaders(ctx, req.(*ReqBlocks))
	}
	return interceptor(ctx, in, info, handler)
}

func _Turingchain_GetServerTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNil)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TuringchainServer).GetServerTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.turingchain/GetServerTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TuringchainServer).GetServerTime(ctx, req.(*ReqNil))
	}
	return interceptor(ctx, in, info, handler)
}

var _Turingchain_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.turingchain",
	HandlerType: (*TuringchainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlocks",
			Handler:    _Turingchain_GetBlocks_Handler,
		},
		{
			MethodName: "GetLastHeader",
			Handler:    _Turingchain_GetLastHeader_Handler,
		},
		{
			MethodName: "CreateRawTransaction",
			Handler:    _Turingchain_CreateRawTransaction_Handler,
		},
		{
			MethodName: "CreateRawTxGroup",
			Handler:    _Turingchain_CreateRawTxGroup_Handler,
		},
		{
			MethodName: "QueryTransaction",
			Handler:    _Turingchain_QueryTransaction_Handler,
		},
		{
			MethodName: "SendTransactionSync",
			Handler:    _Turingchain_SendTransactionSync_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _Turingchain_SendTransaction_Handler,
		},
		{
			MethodName: "GetTransactionByAddr",
			Handler:    _Turingchain_GetTransactionByAddr_Handler,
		},
		{
			MethodName: "GetTransactionByHashes",
			Handler:    _Turingchain_GetTransactionByHashes_Handler,
		},
		{
			MethodName: "GetMemPool",
			Handler:    _Turingchain_GetMemPool_Handler,
		},
		{
			MethodName: "GetAccounts",
			Handler:    _Turingchain_GetAccounts_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _Turingchain_GetAccount_Handler,
		},
		{
			MethodName: "NewAccount",
			Handler:    _Turingchain_NewAccount_Handler,
		},
		{
			MethodName: "WalletTransactionList",
			Handler:    _Turingchain_WalletTransactionList_Handler,
		},
		{
			MethodName: "ImportPrivkey",
			Handler:    _Turingchain_ImportPrivkey_Handler,
		},
		{
			MethodName: "SendToAddress",
			Handler:    _Turingchain_SendToAddress_Handler,
		},
		{
			MethodName: "SetTxFee",
			Handler:    _Turingchain_SetTxFee_Handler,
		},
		{
			MethodName: "SetLabl",
			Handler:    _Turingchain_SetLabl_Handler,
		},
		{
			MethodName: "MergeBalance",
			Handler:    _Turingchain_MergeBalance_Handler,
		},
		{
			MethodName: "SetPasswd",
			Handler:    _Turingchain_SetPasswd_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _Turingchain_Lock_Handler,
		},
		{
			MethodName: "UnLock",
			Handler:    _Turingchain_UnLock_Handler,
		},
		{
			MethodName: "GetLastMemPool",
			Handler:    _Turingchain_GetLastMemPool_Handler,
		},
		{
			MethodName: "GetProperFee",
			Handler:    _Turingchain_GetProperFee_Handler,
		},
		{
			MethodName: "GetWalletStatus",
			Handler:    _Turingchain_GetWalletStatus_Handler,
		},
		{
			MethodName: "GetBlockOverview",
			Handler:    _Turingchain_GetBlockOverview_Handler,
		},
		{
			MethodName: "GetAddrOverview",
			Handler:    _Turingchain_GetAddrOverview_Handler,
		},
		{
			MethodName: "GetBlockHash",
			Handler:    _Turingchain_GetBlockHash_Handler,
		},
		{
			MethodName: "GenSeed",
			Handler:    _Turingchain_GenSeed_Handler,
		},
		{
			MethodName: "GetSeed",
			Handler:    _Turingchain_GetSeed_Handler,
		},
		{
			MethodName: "SaveSeed",
			Handler:    _Turingchain_SaveSeed_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Turingchain_GetBalance_Handler,
		},
		{
			MethodName: "QueryChain",
			Handler:    _Turingchain_QueryChain_Handler,
		},
		{
			MethodName: "ExecWallet",
			Handler:    _Turingchain_ExecWallet_Handler,
		},
		{
			MethodName: "QueryConsensus",
			Handler:    _Turingchain_QueryConsensus_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _Turingchain_CreateTransaction_Handler,
		},
		{
			MethodName: "GetHexTxByHash",
			Handler:    _Turingchain_GetHexTxByHash_Handler,
		},
		{
			MethodName: "DumpPrivkey",
			Handler:    _Turingchain_DumpPrivkey_Handler,
		},
		{
			MethodName: "DumpPrivkeysFile",
			Handler:    _Turingchain_DumpPrivkeysFile_Handler,
		},
		{
			MethodName: "ImportPrivkeysFile",
			Handler:    _Turingchain_ImportPrivkeysFile_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _Turingchain_Version_Handler,
		},
		{
			MethodName: "IsSync",
			Handler:    _Turingchain_IsSync_Handler,
		},
		{
			MethodName: "GetPeerInfo",
			Handler:    _Turingchain_GetPeerInfo_Handler,
		},
		{
			MethodName: "NetInfo",
			Handler:    _Turingchain_NetInfo_Handler,
		},
		{
			MethodName: "IsNtpClockSync",
			Handler:    _Turingchain_IsNtpClockSync_Handler,
		},
		{
			MethodName: "GetFatalFailure",
			Handler:    _Turingchain_GetFatalFailure_Handler,
		},
		{
			MethodName: "GetLastBlockSequence",
			Handler:    _Turingchain_GetLastBlockSequence_Handler,
		},
		{
			MethodName: "GetSequenceByHash",
			Handler:    _Turingchain_GetSequenceByHash_Handler,
		},
		{
			MethodName: "GetBlockByHashes",
			Handler:    _Turingchain_GetBlockByHashes_Handler,
		},
		{
			MethodName: "GetBlockBySeq",
			Handler:    _Turingchain_GetBlockBySeq_Handler,
		},
		{
			MethodName: "CloseQueue",
			Handler:    _Turingchain_CloseQueue_Handler,
		},
		{
			MethodName: "GetAllExecBalance",
			Handler:    _Turingchain_GetAllExecBalance_Handler,
		},
		{
			MethodName: "SignRawTx",
			Handler:    _Turingchain_SignRawTx_Handler,
		},
		{
			MethodName: "CreateNoBalanceTransaction",
			Handler:    _Turingchain_CreateNoBalanceTransaction_Handler,
		},
		{
			MethodName: "QueryRandNum",
			Handler:    _Turingchain_QueryRandNum_Handler,
		},
		{
			MethodName: "GetFork",
			Handler:    _Turingchain_GetFork_Handler,
		},
		{
			MethodName: "CreateNoBalanceTxs",
			Handler:    _Turingchain_CreateNoBalanceTxs_Handler,
		},
		{
			MethodName: "GetParaTxByTitle",
			Handler:    _Turingchain_GetParaTxByTitle_Handler,
		},
		{
			MethodName: "LoadParaTxByTitle",
			Handler:    _Turingchain_LoadParaTxByTitle_Handler,
		},
		{
			MethodName: "GetParaTxByHeight",
			Handler:    _Turingchain_GetParaTxByHeight_Handler,
		},
		{
			MethodName: "GetHeaders",
			Handler:    _Turingchain_GetHeaders_Handler,
		},
		{
			MethodName: "GetServerTime",
			Handler:    _Turingchain_GetServerTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
